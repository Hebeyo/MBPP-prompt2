"""Complete the function with better-performing Python code. Use efficient function calls and looping structures, use efficient algorithms, avoid unnecessary complexity and waste of resources, ensure that the code is concise, and make full use of language features."""
'''Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.
'''

def find_ways(M):
    n = M // 2
    a = 1
    for i in range(0, n):
        a *= (2 * n - i)
        a //= (i + 1)
    b = a // (n + 1)
    return b

'''
Standard answer: 
def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) 
'''
assert find_ways(4) == 2
assert find_ways(6) == 5
assert find_ways(8) == 14
